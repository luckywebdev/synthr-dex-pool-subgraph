// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CollectedProtocolFees extends ethereum.Event {
  get params(): CollectedProtocolFees__Params {
    return new CollectedProtocolFees__Params(this);
  }
}

export class CollectedProtocolFees__Params {
  _event: CollectedProtocolFees;

  constructor(event: CollectedProtocolFees) {
    this._event = event;
  }

  get feeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get protocolFees(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class CompositionFees extends ethereum.Event {
  get params(): CompositionFees__Params {
    return new CompositionFees__Params(this);
  }
}

export class CompositionFees__Params {
  _event: CompositionFees;

  constructor(event: CompositionFees) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get totalFees(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get protocolFees(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class DepositedToBins extends ethereum.Event {
  get params(): DepositedToBins__Params {
    return new DepositedToBins__Params(this);
  }
}

export class DepositedToBins__Params {
  _event: DepositedToBins;

  constructor(event: DepositedToBins) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<Bytes> {
    return this._event.parameters[3].value.toBytesArray();
  }
}

export class FlashLoan extends ethereum.Event {
  get params(): FlashLoan__Params {
    return new FlashLoan__Params(this);
  }
}

export class FlashLoan__Params {
  _event: FlashLoan;

  constructor(event: FlashLoan) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get activeId(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amounts(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get totalFees(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get protocolFees(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class ForcedDecay extends ethereum.Event {
  get params(): ForcedDecay__Params {
    return new ForcedDecay__Params(this);
  }
}

export class ForcedDecay__Params {
  _event: ForcedDecay;

  constructor(event: ForcedDecay) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get idReference(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get volatilityReference(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class OracleLengthIncreased extends ethereum.Event {
  get params(): OracleLengthIncreased__Params {
    return new OracleLengthIncreased__Params(this);
  }
}

export class OracleLengthIncreased__Params {
  _event: OracleLengthIncreased;

  constructor(event: OracleLengthIncreased) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oracleLength(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class StaticFeeParametersSet extends ethereum.Event {
  get params(): StaticFeeParametersSet__Params {
    return new StaticFeeParametersSet__Params(this);
  }
}

export class StaticFeeParametersSet__Params {
  _event: StaticFeeParametersSet;

  constructor(event: StaticFeeParametersSet) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseFactor(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get filterPeriod(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get decayPeriod(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get reductionFactor(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get variableFeeControl(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get protocolShare(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get maxVolatilityAccumulator(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amountsIn(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get amountsOut(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get volatilityAccumulator(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get totalFees(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get protocolFees(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class WithdrawnFromBins extends ethereum.Event {
  get params(): WithdrawnFromBins__Params {
    return new WithdrawnFromBins__Params(this);
  }
}

export class WithdrawnFromBins__Params {
  _event: WithdrawnFromBins;

  constructor(event: WithdrawnFromBins) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<Bytes> {
    return this._event.parameters[3].value.toBytesArray();
  }
}

export class LBPairV21__getBinResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getBinReserveX(): BigInt {
    return this.value0;
  }

  getBinReserveY(): BigInt {
    return this.value1;
  }
}

export class LBPairV21__getOracleParametersResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getSampleLifetime(): i32 {
    return this.value0;
  }

  getSize(): i32 {
    return this.value1;
  }

  getActiveSize(): i32 {
    return this.value2;
  }

  getLastUpdated(): BigInt {
    return this.value3;
  }

  getFirstTimestamp(): BigInt {
    return this.value4;
  }
}

export class LBPairV21__getOracleSampleAtResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getCumulativeId(): BigInt {
    return this.value0;
  }

  getCumulativeVolatility(): BigInt {
    return this.value1;
  }

  getCumulativeBinCrossed(): BigInt {
    return this.value2;
  }
}

export class LBPairV21__getProtocolFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getProtocolFeeX(): BigInt {
    return this.value0;
  }

  getProtocolFeeY(): BigInt {
    return this.value1;
  }
}

export class LBPairV21__getReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReserveX(): BigInt {
    return this.value0;
  }

  getReserveY(): BigInt {
    return this.value1;
  }
}

export class LBPairV21__getStaticFeeParametersResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }

  getBaseFactor(): i32 {
    return this.value0;
  }

  getFilterPeriod(): i32 {
    return this.value1;
  }

  getDecayPeriod(): i32 {
    return this.value2;
  }

  getReductionFactor(): i32 {
    return this.value3;
  }

  getVariableFeeControl(): i32 {
    return this.value4;
  }

  getProtocolShare(): i32 {
    return this.value5;
  }

  getMaxVolatilityAccumulator(): i32 {
    return this.value6;
  }
}

export class LBPairV21__getSwapInResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountIn(): BigInt {
    return this.value0;
  }

  getAmountOutLeft(): BigInt {
    return this.value1;
  }

  getFee(): BigInt {
    return this.value2;
  }
}

export class LBPairV21__getSwapOutResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountInLeft(): BigInt {
    return this.value0;
  }

  getAmountOut(): BigInt {
    return this.value1;
  }

  getFee(): BigInt {
    return this.value2;
  }
}

export class LBPairV21__getVariableFeeParametersResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: BigInt;

  constructor(value0: i32, value1: i32, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getVolatilityAccumulator(): i32 {
    return this.value0;
  }

  getVolatilityReference(): i32 {
    return this.value1;
  }

  getIdReference(): i32 {
    return this.value2;
  }

  getTimeOfLastUpdate(): BigInt {
    return this.value3;
  }
}

export class LBPairV21__mintResult {
  value0: Bytes;
  value1: Bytes;
  value2: Array<BigInt>;

  constructor(value0: Bytes, value1: Bytes, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }

  getAmountsReceived(): Bytes {
    return this.value0;
  }

  getAmountsLeft(): Bytes {
    return this.value1;
  }

  getLiquidityMinted(): Array<BigInt> {
    return this.value2;
  }
}

export class LBPairV21 extends ethereum.SmartContract {
  static bind(address: Address): LBPairV21 {
    return new LBPairV21("LBPairV21", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  burn(
    from: Address,
    to: Address,
    ids: Array<BigInt>,
    amountsToBurn: Array<BigInt>
  ): Array<Bytes> {
    let result = super.call(
      "burn",
      "burn(address,address,uint256[],uint256[]):(bytes32[])",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(amountsToBurn)
      ]
    );

    return result[0].toBytesArray();
  }

  try_burn(
    from: Address,
    to: Address,
    ids: Array<BigInt>,
    amountsToBurn: Array<BigInt>
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "burn",
      "burn(address,address,uint256[],uint256[]):(bytes32[])",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(amountsToBurn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  collectProtocolFees(): Bytes {
    let result = super.call(
      "collectProtocolFees",
      "collectProtocolFees():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_collectProtocolFees(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "collectProtocolFees",
      "collectProtocolFees():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getActiveId(): i32 {
    let result = super.call("getActiveId", "getActiveId():(uint24)", []);

    return result[0].toI32();
  }

  try_getActiveId(): ethereum.CallResult<i32> {
    let result = super.tryCall("getActiveId", "getActiveId():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getBin(id: i32): LBPairV21__getBinResult {
    let result = super.call("getBin", "getBin(uint24):(uint128,uint128)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))
    ]);

    return new LBPairV21__getBinResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getBin(id: i32): ethereum.CallResult<LBPairV21__getBinResult> {
    let result = super.tryCall("getBin", "getBin(uint24):(uint128,uint128)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getBinResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getBinStep(): i32 {
    let result = super.call("getBinStep", "getBinStep():(uint16)", []);

    return result[0].toI32();
  }

  try_getBinStep(): ethereum.CallResult<i32> {
    let result = super.tryCall("getBinStep", "getBinStep():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getFactory(): Address {
    let result = super.call("getFactory", "getFactory():(address)", []);

    return result[0].toAddress();
  }

  try_getFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("getFactory", "getFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIdFromPrice(price: BigInt): i32 {
    let result = super.call(
      "getIdFromPrice",
      "getIdFromPrice(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );

    return result[0].toI32();
  }

  try_getIdFromPrice(price: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getIdFromPrice",
      "getIdFromPrice(uint256):(uint24)",
      [ethereum.Value.fromUnsignedBigInt(price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getNextNonEmptyBin(swapForY: boolean, id: i32): i32 {
    let result = super.call(
      "getNextNonEmptyBin",
      "getNextNonEmptyBin(bool,uint24):(uint24)",
      [
        ethereum.Value.fromBoolean(swapForY),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))
      ]
    );

    return result[0].toI32();
  }

  try_getNextNonEmptyBin(swapForY: boolean, id: i32): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getNextNonEmptyBin",
      "getNextNonEmptyBin(bool,uint24):(uint24)",
      [
        ethereum.Value.fromBoolean(swapForY),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getOracleParameters(): LBPairV21__getOracleParametersResult {
    let result = super.call(
      "getOracleParameters",
      "getOracleParameters():(uint8,uint16,uint16,uint40,uint40)",
      []
    );

    return new LBPairV21__getOracleParametersResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getOracleParameters(): ethereum.CallResult<
    LBPairV21__getOracleParametersResult
  > {
    let result = super.tryCall(
      "getOracleParameters",
      "getOracleParameters():(uint8,uint16,uint16,uint40,uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getOracleParametersResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getOracleSampleAt(
    lookupTimestamp: BigInt
  ): LBPairV21__getOracleSampleAtResult {
    let result = super.call(
      "getOracleSampleAt",
      "getOracleSampleAt(uint40):(uint64,uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(lookupTimestamp)]
    );

    return new LBPairV21__getOracleSampleAtResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getOracleSampleAt(
    lookupTimestamp: BigInt
  ): ethereum.CallResult<LBPairV21__getOracleSampleAtResult> {
    let result = super.tryCall(
      "getOracleSampleAt",
      "getOracleSampleAt(uint40):(uint64,uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(lookupTimestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getOracleSampleAtResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getPriceFromId(id: i32): BigInt {
    let result = super.call(
      "getPriceFromId",
      "getPriceFromId(uint24):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );

    return result[0].toBigInt();
  }

  try_getPriceFromId(id: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceFromId",
      "getPriceFromId(uint24):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(id))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProtocolFees(): LBPairV21__getProtocolFeesResult {
    let result = super.call(
      "getProtocolFees",
      "getProtocolFees():(uint128,uint128)",
      []
    );

    return new LBPairV21__getProtocolFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getProtocolFees(): ethereum.CallResult<LBPairV21__getProtocolFeesResult> {
    let result = super.tryCall(
      "getProtocolFees",
      "getProtocolFees():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getProtocolFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getReserves(): LBPairV21__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves():(uint128,uint128)",
      []
    );

    return new LBPairV21__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getReserves(): ethereum.CallResult<LBPairV21__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getReservesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getStaticFeeParameters(): LBPairV21__getStaticFeeParametersResult {
    let result = super.call(
      "getStaticFeeParameters",
      "getStaticFeeParameters():(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
      []
    );

    return new LBPairV21__getStaticFeeParametersResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32()
    );
  }

  try_getStaticFeeParameters(): ethereum.CallResult<
    LBPairV21__getStaticFeeParametersResult
  > {
    let result = super.tryCall(
      "getStaticFeeParameters",
      "getStaticFeeParameters():(uint16,uint16,uint16,uint16,uint24,uint16,uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getStaticFeeParametersResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32()
      )
    );
  }

  getSwapIn(amountOut: BigInt, swapForY: boolean): LBPairV21__getSwapInResult {
    let result = super.call(
      "getSwapIn",
      "getSwapIn(uint128,bool):(uint128,uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromBoolean(swapForY)
      ]
    );

    return new LBPairV21__getSwapInResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getSwapIn(
    amountOut: BigInt,
    swapForY: boolean
  ): ethereum.CallResult<LBPairV21__getSwapInResult> {
    let result = super.tryCall(
      "getSwapIn",
      "getSwapIn(uint128,bool):(uint128,uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromBoolean(swapForY)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getSwapInResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getSwapOut(amountIn: BigInt, swapForY: boolean): LBPairV21__getSwapOutResult {
    let result = super.call(
      "getSwapOut",
      "getSwapOut(uint128,bool):(uint128,uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromBoolean(swapForY)
      ]
    );

    return new LBPairV21__getSwapOutResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getSwapOut(
    amountIn: BigInt,
    swapForY: boolean
  ): ethereum.CallResult<LBPairV21__getSwapOutResult> {
    let result = super.tryCall(
      "getSwapOut",
      "getSwapOut(uint128,bool):(uint128,uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromBoolean(swapForY)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getSwapOutResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTokenX(): Address {
    let result = super.call("getTokenX", "getTokenX():(address)", []);

    return result[0].toAddress();
  }

  try_getTokenX(): ethereum.CallResult<Address> {
    let result = super.tryCall("getTokenX", "getTokenX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenY(): Address {
    let result = super.call("getTokenY", "getTokenY():(address)", []);

    return result[0].toAddress();
  }

  try_getTokenY(): ethereum.CallResult<Address> {
    let result = super.tryCall("getTokenY", "getTokenY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVariableFeeParameters(): LBPairV21__getVariableFeeParametersResult {
    let result = super.call(
      "getVariableFeeParameters",
      "getVariableFeeParameters():(uint24,uint24,uint24,uint40)",
      []
    );

    return new LBPairV21__getVariableFeeParametersResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt()
    );
  }

  try_getVariableFeeParameters(): ethereum.CallResult<
    LBPairV21__getVariableFeeParametersResult
  > {
    let result = super.tryCall(
      "getVariableFeeParameters",
      "getVariableFeeParameters():(uint24,uint24,uint24,uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__getVariableFeeParametersResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt()
      )
    );
  }

  isApprovedForAll(owner: Address, spender: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    spender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(
    to: Address,
    liquidityConfigs: Array<Bytes>,
    refundTo: Address
  ): LBPairV21__mintResult {
    let result = super.call(
      "mint",
      "mint(address,bytes32[],address):(bytes32,bytes32,uint256[])",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromFixedBytesArray(liquidityConfigs),
        ethereum.Value.fromAddress(refundTo)
      ]
    );

    return new LBPairV21__mintResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBigIntArray()
    );
  }

  try_mint(
    to: Address,
    liquidityConfigs: Array<Bytes>,
    refundTo: Address
  ): ethereum.CallResult<LBPairV21__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,bytes32[],address):(bytes32,bytes32,uint256[])",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromFixedBytesArray(liquidityConfigs),
        ethereum.Value.fromAddress(refundTo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LBPairV21__mintResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBigIntArray()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  swap(swapForY: boolean, to: Address): Bytes {
    let result = super.call("swap", "swap(bool,address):(bytes32)", [
      ethereum.Value.fromBoolean(swapForY),
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBytes();
  }

  try_swap(swapForY: boolean, to: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("swap", "swap(bool,address):(bytes32)", [
      ethereum.Value.fromBoolean(swapForY),
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get factory_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveForAllCall extends ethereum.Call {
  get inputs(): ApproveForAllCall__Inputs {
    return new ApproveForAllCall__Inputs(this);
  }

  get outputs(): ApproveForAllCall__Outputs {
    return new ApproveForAllCall__Outputs(this);
  }
}

export class ApproveForAllCall__Inputs {
  _call: ApproveForAllCall;

  constructor(call: ApproveForAllCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ApproveForAllCall__Outputs {
  _call: ApproveForAllCall;

  constructor(call: ApproveForAllCall) {
    this._call = call;
  }
}

export class BatchTransferFromCall extends ethereum.Call {
  get inputs(): BatchTransferFromCall__Inputs {
    return new BatchTransferFromCall__Inputs(this);
  }

  get outputs(): BatchTransferFromCall__Outputs {
    return new BatchTransferFromCall__Outputs(this);
  }
}

export class BatchTransferFromCall__Inputs {
  _call: BatchTransferFromCall;

  constructor(call: BatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class BatchTransferFromCall__Outputs {
  _call: BatchTransferFromCall;

  constructor(call: BatchTransferFromCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amountsToBurn(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amounts(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class CollectProtocolFeesCall extends ethereum.Call {
  get inputs(): CollectProtocolFeesCall__Inputs {
    return new CollectProtocolFeesCall__Inputs(this);
  }

  get outputs(): CollectProtocolFeesCall__Outputs {
    return new CollectProtocolFeesCall__Outputs(this);
  }
}

export class CollectProtocolFeesCall__Inputs {
  _call: CollectProtocolFeesCall;

  constructor(call: CollectProtocolFeesCall) {
    this._call = call;
  }
}

export class CollectProtocolFeesCall__Outputs {
  _call: CollectProtocolFeesCall;

  constructor(call: CollectProtocolFeesCall) {
    this._call = call;
  }

  get collectedProtocolFees(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amounts(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class ForceDecayCall extends ethereum.Call {
  get inputs(): ForceDecayCall__Inputs {
    return new ForceDecayCall__Inputs(this);
  }

  get outputs(): ForceDecayCall__Outputs {
    return new ForceDecayCall__Outputs(this);
  }
}

export class ForceDecayCall__Inputs {
  _call: ForceDecayCall;

  constructor(call: ForceDecayCall) {
    this._call = call;
  }
}

export class ForceDecayCall__Outputs {
  _call: ForceDecayCall;

  constructor(call: ForceDecayCall) {
    this._call = call;
  }
}

export class IncreaseOracleLengthCall extends ethereum.Call {
  get inputs(): IncreaseOracleLengthCall__Inputs {
    return new IncreaseOracleLengthCall__Inputs(this);
  }

  get outputs(): IncreaseOracleLengthCall__Outputs {
    return new IncreaseOracleLengthCall__Outputs(this);
  }
}

export class IncreaseOracleLengthCall__Inputs {
  _call: IncreaseOracleLengthCall;

  constructor(call: IncreaseOracleLengthCall) {
    this._call = call;
  }

  get newLength(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class IncreaseOracleLengthCall__Outputs {
  _call: IncreaseOracleLengthCall;

  constructor(call: IncreaseOracleLengthCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get baseFactor(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get filterPeriod(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get decayPeriod(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get reductionFactor(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get variableFeeControl(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get protocolShare(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get maxVolatilityAccumulator(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get activeId(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidityConfigs(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get refundTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amountsReceived(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get amountsLeft(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }

  get liquidityMinted(): Array<BigInt> {
    return this._call.outputValues[2].value.toBigIntArray();
  }
}

export class SetStaticFeeParametersCall extends ethereum.Call {
  get inputs(): SetStaticFeeParametersCall__Inputs {
    return new SetStaticFeeParametersCall__Inputs(this);
  }

  get outputs(): SetStaticFeeParametersCall__Outputs {
    return new SetStaticFeeParametersCall__Outputs(this);
  }
}

export class SetStaticFeeParametersCall__Inputs {
  _call: SetStaticFeeParametersCall;

  constructor(call: SetStaticFeeParametersCall) {
    this._call = call;
  }

  get baseFactor(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get filterPeriod(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get decayPeriod(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get reductionFactor(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get variableFeeControl(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get protocolShare(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get maxVolatilityAccumulator(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class SetStaticFeeParametersCall__Outputs {
  _call: SetStaticFeeParametersCall;

  constructor(call: SetStaticFeeParametersCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get swapForY(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amountsOut(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
